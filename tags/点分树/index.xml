<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>点分树 on _slb 的博客</title>
    <link>http://example.org/tags/%E7%82%B9%E5%88%86%E6%A0%91/</link>
    <description>Recent content in 点分树 on _slb 的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Jan 2022 07:22:01 +0000</lastBuildDate><atom:link href="http://example.org/tags/%E7%82%B9%E5%88%86%E6%A0%91/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>uoj55 紫荆花之恋</title>
      <link>http://example.org/posts/uoj55/</link>
      <pubDate>Mon, 17 Jan 2022 07:22:01 +0000</pubDate>
      
      <guid>http://example.org/posts/uoj55/</guid>
      <description>&lt;h2 id=&#34;description&#34;&gt;Description&lt;/h2&gt;
&lt;p&gt;有一棵初始为空的树，每次新给出一个点的父亲和它连向父亲边的权值以及这个点的权值，每次加点之后询问有多少点满足 $dis(i,j)\leq val_i+val_j$，强制在线。&lt;/p&gt;
&lt;p&gt;$n\leq10^5$。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="description">Description</h2>
<p>有一棵初始为空的树，每次新给出一个点的父亲和它连向父亲边的权值以及这个点的权值，每次加点之后询问有多少点满足 $dis(i,j)\leq val_i+val_j$，强制在线。</p>
<p>$n\leq10^5$。</p>
<h2 id="solution">Solution</h2>
<p>如果树是静态的，那么这是个点分治裸题：把条件拆成 $dis(i,root)-val_i\leq -dis(root, j)+val_j$，用平衡树维护即可。</p>
<p>现在我们动态加儿子，可以尝试用点分树维护。当一个点分树上一个子树的大小过于不平衡直接重构这个点分树即可。</p>
<p>复杂度 $O(n\log^3n)$。</p>
<p>听起来很简单是吧，实际上写起来还是有点复杂的。</p>
<p>按照常规套路，在每个点维护两棵平衡树，分别代表这个点在点分树上子树内所有点在原树上到该点的信息、这个点在点分树上子树内所有点在原树上到原树上该点父亲的信息，然后查询的时候减一下去掉重复统计的部分。</p>
<p>重构怎么办呢？</p>
<p>感觉上我们需要把整个子树都重建一遍，别的还好说，但我们要重构的这棵树的根到他父亲的信息似乎不是很好维护，然后有一个 trick，直接把原来的平衡树挪到新根上就好了！</p>
<p>平衡树显然需要写一个垃圾回收。</p>
<h2 id="code">Code</h2>
<div class="highlight"><pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;algorithm&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;cstdio&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;cstdlib&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;cstring&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;iostream&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;set&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820">#include</span> <span style="color:#633820">&lt;vector&gt;</span><span style="color:#633820">
</span></span></span><span style="display:flex;"><span><span style="color:#633820"></span><span style="color:#a90d91">using</span> <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">cerr</span>;
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">cin</span>;
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">cout</span>;
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">endl</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">const</span> <span style="color:#a90d91">int</span> <span style="color:#000">maxn</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1e5</span> <span style="color:#000">+</span> <span style="color:#1c01ce">10</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">int</span> <span style="color:#000">dep</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">struct</span> <span style="color:#3f6e75">edge</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">y</span>, <span style="color:#000">w</span>;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span><span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">vector</span><span style="color:#000">&lt;</span><span style="color:#000">edge</span><span style="color:#000">&gt;</span> <span style="color:#000">e</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">namespace</span> <span style="color:#000">tree</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">father</span>[<span style="color:#000">maxn</span>][<span style="color:#1c01ce">20</span>], <span style="color:#000">dis_rt</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">inline</span> <span style="color:#a90d91">void</span> <span style="color:#000">add</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">y</span>, <span style="color:#a90d91">int</span> <span style="color:#000">w</span>) { <span style="color:#000">e</span>[<span style="color:#000">x</span>].<span style="color:#000">push_back</span>({<span style="color:#000">y</span>, <span style="color:#000">w</span>}), <span style="color:#000">e</span>[<span style="color:#000">y</span>].<span style="color:#000">push_back</span>({<span style="color:#000">x</span>, <span style="color:#000">w</span>}); }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">add_node</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">fa</span>, <span style="color:#a90d91">int</span> <span style="color:#000">w</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#1c01ce">0</span>] <span style="color:#000">=</span> <span style="color:#000">fa</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">fa</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#000">add</span>(<span style="color:#000">x</span>, <span style="color:#000">fa</span>, <span style="color:#000">w</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">dep</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">dep</span>[<span style="color:#000">fa</span>] <span style="color:#000">+</span> <span style="color:#1c01ce">1</span>, <span style="color:#000">dis_rt</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">dis_rt</span>[<span style="color:#000">fa</span>] <span style="color:#000">+</span> <span style="color:#000">w</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span>; <span style="color:#000">i</span> <span style="color:#000">&lt;=</span> <span style="color:#1c01ce">18</span>; <span style="color:#000">i</span><span style="color:#000">++</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#000">i</span>] <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#000">i</span> <span style="color:#000">-</span> <span style="color:#1c01ce">1</span>]][<span style="color:#000">i</span> <span style="color:#000">-</span> <span style="color:#1c01ce">1</span>];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">lca</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">y</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">dep</span>[<span style="color:#000">x</span>] <span style="color:#000">&lt;</span> <span style="color:#000">dep</span>[<span style="color:#000">y</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">swap</span>(<span style="color:#000">x</span>, <span style="color:#000">y</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">int</span> <span style="color:#000">d</span> <span style="color:#000">=</span> <span style="color:#000">dep</span>[<span style="color:#000">x</span>] <span style="color:#000">-</span> <span style="color:#000">dep</span>[<span style="color:#000">y</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>; <span style="color:#000">d</span>; <span style="color:#000">d</span> <span style="color:#000">&gt;&gt;=</span> <span style="color:#1c01ce">1</span>, <span style="color:#000">i</span><span style="color:#000">++</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">d</span> <span style="color:#000">&amp;</span> <span style="color:#1c01ce">1</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#000">x</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#000">i</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">x</span> <span style="color:#000">==</span> <span style="color:#000">y</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span> <span style="color:#000">x</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#1c01ce">18</span>; <span style="color:#000">i</span> <span style="color:#000">&gt;=</span> <span style="color:#1c01ce">0</span>; <span style="color:#000">i</span><span style="color:#000">--</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#000">i</span>] <span style="color:#000">!=</span> <span style="color:#000">father</span>[<span style="color:#000">y</span>][<span style="color:#000">i</span>])
</span></span><span style="display:flex;"><span>                <span style="color:#000">x</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#000">i</span>], <span style="color:#000">y</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">y</span>][<span style="color:#000">i</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">return</span> <span style="color:#000">father</span>[<span style="color:#000">x</span>][<span style="color:#1c01ce">0</span>];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">dis</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">y</span>) { <span style="color:#a90d91">return</span> <span style="color:#000">dis_rt</span>[<span style="color:#000">x</span>] <span style="color:#000">+</span> <span style="color:#000">dis_rt</span>[<span style="color:#000">y</span>] <span style="color:#000">-</span> <span style="color:#1c01ce">2</span> <span style="color:#000">*</span> <span style="color:#000">dis_rt</span>[<span style="color:#000">lca</span>(<span style="color:#000">x</span>, <span style="color:#000">y</span>)]; }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">tree</span><span style="color:#000">::</span><span style="color:#000">dis</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">namespace</span> <span style="color:#000">Treap</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">top</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">struct</span> <span style="color:#3f6e75">Node</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">int</span> <span style="color:#000">val</span>, <span style="color:#000">siz</span>, <span style="color:#000">rnd</span>, <span style="color:#000">num</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">son</span>[<span style="color:#1c01ce">2</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">inline</span> <span style="color:#a90d91">void</span> <span style="color:#000">push_up</span>()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#000">siz</span> <span style="color:#000">=</span> <span style="color:#000">num</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>])
</span></span><span style="display:flex;"><span>                <span style="color:#000">siz</span> <span style="color:#000">+=</span> <span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>]<span style="color:#000">-&gt;</span><span style="color:#000">siz</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">son</span>[<span style="color:#1c01ce">1</span>])
</span></span><span style="display:flex;"><span>                <span style="color:#000">siz</span> <span style="color:#000">+=</span> <span style="color:#000">son</span>[<span style="color:#1c01ce">1</span>]<span style="color:#000">-&gt;</span><span style="color:#000">siz</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#000">a</span>[<span style="color:#000">maxn</span> <span style="color:#000">*</span> <span style="color:#1c01ce">100</span>], <span style="color:#000">*</span><span style="color:#000">bin</span>[<span style="color:#000">maxn</span> <span style="color:#000">*</span> <span style="color:#1c01ce">100</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">inline</span> <span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">new_node</span>(<span style="color:#a90d91">int</span> <span style="color:#000">val</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">res</span> <span style="color:#000">=</span> <span style="color:#000">bin</span>[<span style="color:#000">--</span><span style="color:#000">top</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#000">res</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>] <span style="color:#000">=</span> <span style="color:#000">res</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">1</span>] <span style="color:#000">=</span> <span style="color:#a90d91">nullptr</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">res</span><span style="color:#000">-&gt;</span><span style="color:#000">siz</span> <span style="color:#000">=</span> <span style="color:#000">res</span><span style="color:#000">-&gt;</span><span style="color:#000">num</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span>, <span style="color:#000">res</span><span style="color:#000">-&gt;</span><span style="color:#000">val</span> <span style="color:#000">=</span> <span style="color:#000">val</span>, <span style="color:#000">res</span><span style="color:#000">-&gt;</span><span style="color:#000">rnd</span> <span style="color:#000">=</span> <span style="color:#000">rand</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">return</span> <span style="color:#000">res</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">inline</span> <span style="color:#a90d91">void</span> <span style="color:#000">del_node</span>(<span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">p</span>) { <span style="color:#000">bin</span>[<span style="color:#000">top</span><span style="color:#000">++</span>] <span style="color:#000">=</span> <span style="color:#000">p</span>; }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">inline</span> <span style="color:#a90d91">void</span> <span style="color:#000">rotate</span>(<span style="color:#000">Node</span> <span style="color:#000">*&amp;</span><span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">d</span>) <span style="color:#177500">// 0:right 1:left
</span></span></span><span style="display:flex;"><span><span style="color:#177500"></span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">t</span> <span style="color:#000">=</span> <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#000">d</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#000">d</span>] <span style="color:#000">=</span> <span style="color:#000">t</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#000">d</span> <span style="color:#000">^</span> <span style="color:#1c01ce">1</span>], <span style="color:#000">t</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#000">d</span> <span style="color:#000">^</span> <span style="color:#1c01ce">1</span>] <span style="color:#000">=</span> <span style="color:#000">x</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">push_up</span>(), <span style="color:#000">t</span><span style="color:#000">-&gt;</span><span style="color:#000">push_up</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#000">x</span> <span style="color:#000">=</span> <span style="color:#000">t</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">insert</span>(<span style="color:#000">Node</span> <span style="color:#000">*&amp;</span><span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">val</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">!</span><span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#000">x</span> <span style="color:#000">=</span> <span style="color:#000">new_node</span>(<span style="color:#000">val</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">siz</span><span style="color:#000">++</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">val</span> <span style="color:#000">==</span> <span style="color:#000">val</span>)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">num</span><span style="color:#000">++</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">int</span> <span style="color:#000">d</span> <span style="color:#000">=</span> <span style="color:#000">val</span> <span style="color:#000">&gt;</span> <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">val</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">insert</span>(<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#000">d</span>], <span style="color:#000">val</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#000">d</span>]<span style="color:#000">-&gt;</span><span style="color:#000">rnd</span> <span style="color:#000">&lt;</span> <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">rnd</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#000">rotate</span>(<span style="color:#000">x</span>, <span style="color:#000">d</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">remove</span>(<span style="color:#000">Node</span> <span style="color:#000">*&amp;</span><span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">!</span><span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">remove</span>(<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>]), <span style="color:#000">remove</span>(<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">1</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#000">del_node</span>(<span style="color:#000">x</span>), <span style="color:#000">x</span> <span style="color:#000">=</span> <span style="color:#a90d91">nullptr</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">rank</span>(<span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">k</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">!</span><span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span> <span style="color:#1c01ce">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">k</span> <span style="color:#000">&lt;</span> <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">val</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span> <span style="color:#000">rank</span>(<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>], <span style="color:#000">k</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">else</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">return</span> <span style="color:#000">rank</span>(<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">1</span>], <span style="color:#000">k</span>) <span style="color:#000">+</span> <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">num</span> <span style="color:#000">+</span> (<span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>] <span style="color:#000">?</span> <span style="color:#000">x</span><span style="color:#000">-&gt;</span><span style="color:#000">son</span>[<span style="color:#1c01ce">0</span>]<span style="color:#000">-&gt;</span><span style="color:#000">siz</span> : <span style="color:#1c01ce">0</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">struct</span> <span style="color:#3f6e75">init</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">init</span>()
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>; <span style="color:#000">i</span> <span style="color:#000">&lt;</span> <span style="color:#000">maxn</span> <span style="color:#000">*</span> <span style="color:#1c01ce">100</span>; <span style="color:#000">i</span><span style="color:#000">++</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#000">bin</span>[<span style="color:#000">top</span><span style="color:#000">++</span>] <span style="color:#000">=</span> <span style="color:#000">&amp;</span><span style="color:#000">a</span>[<span style="color:#000">i</span>];
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    } <span style="color:#000">init_</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#000">Treap</span><span style="color:#000">::</span><span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">fa</span>[<span style="color:#000">maxn</span>], <span style="color:#000">*</span><span style="color:#000">self</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">Treap</span><span style="color:#000">::</span><span style="color:#000">insert</span>;
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">Treap</span><span style="color:#000">::</span><span style="color:#000">rank</span>;
</span></span><span style="display:flex;"><span><span style="color:#a90d91">using</span> <span style="color:#000">Treap</span><span style="color:#000">::</span><span style="color:#000">remove</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">int</span> <span style="color:#000">val</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span><span style="color:#a90d91">int</span> <span style="color:#000">father</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span><span style="color:#a90d91">namespace</span> <span style="color:#000">divide</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">set</span><span style="color:#000">&lt;</span><span style="color:#a90d91">int</span><span style="color:#000">&gt;</span> <span style="color:#000">son</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">time</span>, <span style="color:#000">is</span>[<span style="color:#000">maxn</span>], <span style="color:#000">tot</span>, <span style="color:#000">all</span>, <span style="color:#000">siz</span>[<span style="color:#000">maxn</span>], <span style="color:#000">root</span>, <span style="color:#000">mx</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">vis</span>[<span style="color:#000">maxn</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">remove</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">is</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">time</span>, <span style="color:#000">tot</span><span style="color:#000">++</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">remove</span>(<span style="color:#000">self</span>[<span style="color:#000">x</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">auto</span> <span style="color:#000">i</span> : <span style="color:#000">son</span>[<span style="color:#000">x</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#000">remove</span>(<span style="color:#000">i</span>), <span style="color:#000">remove</span>(<span style="color:#000">fa</span>[<span style="color:#000">i</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#000">son</span>[<span style="color:#000">x</span>].<span style="color:#000">clear</span>();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">get_siz</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">fa</span>, <span style="color:#a90d91">int</span> <span style="color:#000">dep</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">siz</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#1c01ce">1</span>, <span style="color:#000">mx</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">auto</span> <span style="color:#000">v</span> : <span style="color:#000">e</span>[<span style="color:#000">x</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">is</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>] <span style="color:#000">==</span> <span style="color:#000">time</span> <span style="color:#000">&amp;&amp;</span> <span style="color:#000">vis</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>] <span style="color:#000">!=</span> <span style="color:#000">time</span> <span style="color:#000">&amp;&amp;</span> <span style="color:#000">v</span>.<span style="color:#000">y</span> <span style="color:#000">!=</span> <span style="color:#000">fa</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#000">get_siz</span>(<span style="color:#000">v</span>.<span style="color:#000">y</span>, <span style="color:#000">x</span>, <span style="color:#000">dep</span> <span style="color:#000">+</span> <span style="color:#000">v</span>.<span style="color:#000">w</span>), <span style="color:#000">siz</span>[<span style="color:#000">x</span>] <span style="color:#000">+=</span> <span style="color:#000">siz</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>], <span style="color:#000">mx</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">max</span>(<span style="color:#000">mx</span>[<span style="color:#000">x</span>], <span style="color:#000">siz</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#000">mx</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">std</span><span style="color:#000">::</span><span style="color:#000">max</span>(<span style="color:#000">mx</span>[<span style="color:#000">x</span>], <span style="color:#000">all</span> <span style="color:#000">-</span> <span style="color:#000">siz</span>[<span style="color:#000">x</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">mx</span>[<span style="color:#000">x</span>] <span style="color:#000">&lt;</span> <span style="color:#000">mx</span>[<span style="color:#000">root</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#000">root</span> <span style="color:#000">=</span> <span style="color:#000">x</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">dfs</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">fa</span>, <span style="color:#a90d91">int</span> <span style="color:#000">dep</span>, <span style="color:#000">Treap</span><span style="color:#000">::</span><span style="color:#000">Node</span> <span style="color:#000">*&amp;</span><span style="color:#000">p</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">insert</span>(<span style="color:#000">p</span>, <span style="color:#000">dep</span> <span style="color:#000">-</span> <span style="color:#000">val</span>[<span style="color:#000">x</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">auto</span> <span style="color:#000">v</span> : <span style="color:#000">e</span>[<span style="color:#000">x</span>])
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">is</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>] <span style="color:#000">!=</span> <span style="color:#000">time</span> <span style="color:#000">||</span> <span style="color:#000">v</span>.<span style="color:#000">y</span> <span style="color:#000">==</span> <span style="color:#000">fa</span> <span style="color:#000">||</span> <span style="color:#000">vis</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>] <span style="color:#000">==</span> <span style="color:#000">time</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#a90d91">continue</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">else</span>
</span></span><span style="display:flex;"><span>                <span style="color:#000">dfs</span>(<span style="color:#000">v</span>.<span style="color:#000">y</span>, <span style="color:#000">x</span>, <span style="color:#000">dep</span> <span style="color:#000">+</span> <span style="color:#000">v</span>.<span style="color:#000">w</span>, <span style="color:#000">p</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">solve</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">vis</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">time</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">dfs</span>(<span style="color:#000">x</span>, <span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">0</span>, <span style="color:#000">self</span>[<span style="color:#000">x</span>]);
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">for</span> (<span style="color:#a90d91">auto</span> <span style="color:#000">v</span> : <span style="color:#000">e</span>[<span style="color:#000">x</span>])
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#a90d91">if</span> (<span style="color:#000">is</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>] <span style="color:#000">!=</span> <span style="color:#000">time</span> <span style="color:#000">||</span> <span style="color:#000">vis</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>] <span style="color:#000">==</span> <span style="color:#000">time</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#a90d91">continue</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#000">root</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>, <span style="color:#000">mx</span>[<span style="color:#000">root</span>] <span style="color:#000">=</span> <span style="color:#1c01ce">1</span> <span style="color:#000">&lt;&lt;</span> <span style="color:#1c01ce">30</span>, <span style="color:#000">all</span> <span style="color:#000">=</span> <span style="color:#000">siz</span>[<span style="color:#000">v</span>.<span style="color:#000">y</span>];
</span></span><span style="display:flex;"><span>            <span style="color:#000">get_siz</span>(<span style="color:#000">v</span>.<span style="color:#000">y</span>, <span style="color:#000">x</span>, <span style="color:#1c01ce">0</span>), <span style="color:#000">get_siz</span>(<span style="color:#000">root</span>, <span style="color:#000">x</span>, <span style="color:#1c01ce">0</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#000">dfs</span>(<span style="color:#000">v</span>.<span style="color:#000">y</span>, <span style="color:#1c01ce">0</span>, <span style="color:#000">v</span>.<span style="color:#000">w</span>, <span style="color:#000">fa</span>[<span style="color:#000">root</span>]), <span style="color:#000">father</span>[<span style="color:#000">root</span>] <span style="color:#000">=</span> <span style="color:#000">x</span>, <span style="color:#000">son</span>[<span style="color:#000">x</span>].<span style="color:#000">insert</span>(<span style="color:#000">root</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#000">solve</span>(<span style="color:#000">root</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">void</span> <span style="color:#000">rebuild</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">time</span><span style="color:#000">++</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">tot</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">int</span> <span style="color:#000">f</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">x</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#000">son</span>[<span style="color:#000">f</span>].<span style="color:#000">erase</span>(<span style="color:#000">x</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">Treap</span><span style="color:#000">::</span><span style="color:#000">Node</span> <span style="color:#000">*</span><span style="color:#000">tmp</span> <span style="color:#000">=</span> <span style="color:#000">fa</span>[<span style="color:#000">x</span>];
</span></span><span style="display:flex;"><span>        <span style="color:#000">fa</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#a90d91">nullptr</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">remove</span>(<span style="color:#000">x</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">root</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>, <span style="color:#000">mx</span>[<span style="color:#000">root</span>] <span style="color:#000">=</span> <span style="color:#1c01ce">1</span> <span style="color:#000">&lt;&lt;</span> <span style="color:#1c01ce">30</span>, <span style="color:#000">all</span> <span style="color:#000">=</span> <span style="color:#000">tot</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">get_siz</span>(<span style="color:#000">x</span>, <span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">0</span>), <span style="color:#000">get_siz</span>(<span style="color:#000">root</span>, <span style="color:#1c01ce">0</span>, <span style="color:#1c01ce">0</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">father</span>[<span style="color:#000">root</span>] <span style="color:#000">=</span> <span style="color:#000">f</span>, <span style="color:#000">son</span>[<span style="color:#000">f</span>].<span style="color:#000">insert</span>(<span style="color:#000">root</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">fa</span>[<span style="color:#000">root</span>] <span style="color:#000">=</span> <span style="color:#000">tmp</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#000">solve</span>(<span style="color:#000">root</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">int</span> <span style="color:#000">add</span>(<span style="color:#a90d91">int</span> <span style="color:#000">x</span>, <span style="color:#a90d91">int</span> <span style="color:#000">f</span>, <span style="color:#a90d91">int</span> <span style="color:#000">w</span>, <span style="color:#a90d91">int</span> <span style="color:#000">vall</span>)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#000">tree</span><span style="color:#000">::</span><span style="color:#000">add_node</span>(<span style="color:#000">x</span>, <span style="color:#000">f</span>, <span style="color:#000">w</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#000">val</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">vall</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#000">divide</span><span style="color:#000">::</span><span style="color:#000">son</span>[<span style="color:#000">father</span>[<span style="color:#000">x</span>] <span style="color:#000">=</span> <span style="color:#000">f</span>].<span style="color:#000">insert</span>(<span style="color:#000">x</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">res</span> <span style="color:#000">=</span> <span style="color:#000">rank</span>(<span style="color:#000">self</span>[<span style="color:#000">x</span>], <span style="color:#000">vall</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#000">insert</span>(<span style="color:#000">self</span>[<span style="color:#000">x</span>], <span style="color:#000">-</span><span style="color:#000">vall</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#000">x</span>; <span style="color:#000">father</span>[<span style="color:#000">i</span>]; <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">i</span>])
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">int</span> <span style="color:#000">f</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">i</span>], <span style="color:#000">w</span> <span style="color:#000">=</span> <span style="color:#000">dis</span>(<span style="color:#000">x</span>, <span style="color:#000">f</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">res</span> <span style="color:#000">+=</span> <span style="color:#000">rank</span>(<span style="color:#000">self</span>[<span style="color:#000">f</span>], <span style="color:#000">vall</span> <span style="color:#000">-</span> <span style="color:#000">w</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">res</span> <span style="color:#000">-=</span> <span style="color:#000">rank</span>(<span style="color:#000">fa</span>[<span style="color:#000">i</span>], <span style="color:#000">vall</span> <span style="color:#000">-</span> <span style="color:#000">w</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">insert</span>(<span style="color:#000">fa</span>[<span style="color:#000">i</span>], <span style="color:#000">w</span> <span style="color:#000">-</span> <span style="color:#000">vall</span>), <span style="color:#000">insert</span>(<span style="color:#000">self</span>[<span style="color:#000">f</span>], <span style="color:#000">w</span> <span style="color:#000">-</span> <span style="color:#000">vall</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">flag</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#000">x</span>; <span style="color:#000">father</span>[<span style="color:#000">i</span>]; <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">i</span>])
</span></span><span style="display:flex;"><span>        <span style="color:#a90d91">if</span> (<span style="color:#000">self</span>[<span style="color:#000">i</span>]<span style="color:#000">-&gt;</span><span style="color:#000">siz</span> <span style="color:#000">&gt;</span> <span style="color:#000">self</span>[<span style="color:#000">father</span>[<span style="color:#000">i</span>]]<span style="color:#000">-&gt;</span><span style="color:#000">siz</span> <span style="color:#000">*</span> <span style="color:#1c01ce">0.8</span>)
</span></span><span style="display:flex;"><span>            <span style="color:#000">flag</span> <span style="color:#000">=</span> <span style="color:#000">father</span>[<span style="color:#000">i</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">if</span> (<span style="color:#000">flag</span>)
</span></span><span style="display:flex;"><span>        <span style="color:#000">divide</span><span style="color:#000">::</span><span style="color:#000">rebuild</span>(<span style="color:#000">flag</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">return</span> <span style="color:#000">res</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a90d91">int</span> <span style="color:#000">main</span>()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">u</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#000">scanf</span>(<span style="color:#c41a16">&#34;%d&#34;</span>, <span style="color:#000">&amp;</span><span style="color:#000">u</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">int</span> <span style="color:#000">n</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#000">scanf</span>(<span style="color:#c41a16">&#34;%d&#34;</span>, <span style="color:#000">&amp;</span><span style="color:#000">n</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">long</span> <span style="color:#a90d91">long</span> <span style="color:#000">ans</span> <span style="color:#000">=</span> <span style="color:#1c01ce">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a90d91">for</span> (<span style="color:#a90d91">int</span> <span style="color:#000">i</span> <span style="color:#000">=</span> <span style="color:#1c01ce">1</span>, <span style="color:#000">a</span>, <span style="color:#000">c</span>, <span style="color:#000">r</span>; <span style="color:#000">i</span> <span style="color:#000">&lt;=</span> <span style="color:#000">n</span>; <span style="color:#000">i</span><span style="color:#000">++</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#000">scanf</span>(<span style="color:#c41a16">&#34;%d%d%d&#34;</span>, <span style="color:#000">&amp;</span><span style="color:#000">a</span>, <span style="color:#000">&amp;</span><span style="color:#000">c</span>, <span style="color:#000">&amp;</span><span style="color:#000">r</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">a</span> <span style="color:#000">=</span> <span style="color:#000">a</span> <span style="color:#000">^</span> (<span style="color:#000">ans</span> <span style="color:#000">%</span> <span style="color:#1c01ce">1000000000</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#000">printf</span>(<span style="color:#c41a16">&#34;%lld</span><span style="color:#c41a16">\\</span><span style="color:#c41a16">n&#34;</span>, <span style="color:#000">ans</span> <span style="color:#000">+=</span> <span style="color:#000">add</span>(<span style="color:#000">i</span>, <span style="color:#000">a</span>, <span style="color:#000">c</span>, <span style="color:#000">r</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
